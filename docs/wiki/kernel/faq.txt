KERNEL FAQ
________________________________________________________________________________

Common questions asked by users about managing the kernel.


* Why doesn't my kernel boot?
________________________________________________________________________________

The kernel not booting can be a variety of issues. This is almost always
related to a configuration issue in the kernel, /etc/fstab or the bootloader.

KISS doesn't use an initramfs so the configuration of the kernel may have
different requirements to other distributions.

  1. The drivers for your disk controller, drives and filesystems must not be
     built as kernel modules. They should be set to =y in your .config or [*]
     when using make menuconfig.

     Essentially, every driver the kernel requires to detect and mount the
     drive containing the root filesystem, must be built as a part of the
     kernel binary.

  2. Multi-drive systems must use PARTUUID or UUID in place of /dev/sdXX in the
     bootloader configuration to ensure that the kernel will find the right
     drive.


* Why doesn't KISS support initramfs?
________________________________________________________________________________

KISS technically supports booting via an initramfs, it just doesn't require or
provide one. As a user you have the means to set this up yourself for your
system.

Full disk encryption is also possible without the use of an initramfs in modern
kernels (see dm-mod.create).

The initramfs concept is an ugly, complicated and largely optional mess. Thank
god it isn't a requirement.


* Why must I compile my own kernel?
________________________________________________________________________________

The kernel must be compiled by the user for a variety of reasons.

  1. The user maintains full control over all aspects of their kernel and
     further, their entire system. There is no lock-in into a specific set of
     kernel sources, version, use of proprietary firmware, patches, config, etc.

     The user decides:

     - Which kernel to use (sources and version).
     - When to update their kernel.
     - Whether to use proprietary firmware blobs.
     - Which patches to use (if any).
     - How the kernel is configured (endless options).
     - How many kernels they'd like to keep.
     - Compiler options (-O3, -march=native, etc).

     You as a user might actually learn something too. You may come to
     understand your hardware, what drivers it needs, how the kernel works from
     a configuration perspective, etc.

     You should have a better understanding of this part of the system
     afterwards and you'll be able fix any issues at this level with relative
     ease.

     Remember, it's only hard the first time. Once a working config is created,
     no further work should need to be done each time you update your kernel.

     If the new kernel version has an issue with your hardware, simply boot
     another from your backups. If new hardware was added, simply run
     'make menuconfig' and add what is needed.

     I'll say what I always say. Nothing prevents anyone from providing kernel
     binaries and an initramfs generation tool for KISS. Just don't wait on the
     BDFL to do it for you.

  2. Eases distribution maintenance for the BDFL. Shipping a generic kernel
     demands a humongous, module heavy kernel with support for everything under
     the sun. An initramfs is then a requirement to boot this damn monstrosity.

     There is then a need for a _portable_ initramfs generation tool which to
     my knowledge doesn't exist. There can't be a dependence on bash or
     anything outside of core. All initramfs tools are either
     distribution-specific or non-portable to KISS.

     Then there'd be endless support requests for tweaks, additions and
     removals to the distribution config and the burden of updating the kernel
     on every release.

     Does KISS ship the latest kernel? The long term support kernel? Both? Some
     users require firmware so we'd need two separate binaries, one for
     linux-libre and another for regular linux.

     What if the latest kernel has issues on some hardware? New builds and
     binaries must be released with backported patches.

     It's a large maintenance burden for something which can simply be solved
     by the user doing this themselves. The user maintains full control over
     every aspect of their kernel and is solely responsible for it.


* Why doesn't KISS provide kernel sources as a package?
________________________________________________________________________________

Why should it? See above.


* Must I keep the linux-headers package in sync with my kernel's version to
  maintain a working system?
________________________________________________________________________________

The kernel headers in KISS are pinned to an LTS kernel version and are only
updated when there are changes of interest in the kernel or headers themselves
(usually by users requesting new features available in the newer headers).

The headers are backwards compatible and are fully usable with a matching or
NEWER kernel version. There are two cases where you'd be required to update
the headers yourself.

  1. To run a kernel _older_ than the default headers.
  2. To make use of features in your _newer_ kernel version.

Here's an excerpt from the kernel's documentation which may explain the
situation better than I.

  > Kernel headers are backwards compatible, but not forwards compatible. This
    means that a program built against a C library using older kernel headers
    should run on a newer kernel (although it may not have access to new
    features), but a program built against newer kernel headers may not work on
    an older kernel.

    https://www.kernel.org/doc/Documentation/kbuild/headers_install.txt
