DISTRIBUTION FAQ
________________________________________________________________________________

Common questions asked by users about the distribution as a whole..


* Why should I use KISS?
________________________________________________________________________________

That's up to you to decide.

I'm not going to try and sell you something I'm giving away for free. Have a
read of the website and its wealth of information, try KISS in a virtual
machine (a chroot is also an option) and come to your own conclusions.


* What does KISS mean?
________________________________________________________________________________

KISS is an acronym for "Keep it simple stupid" (notice _no_ comma).

Stupid does not refer to the user. To quote Wikipedia:

> The principle is best exemplified by the story of Johnson handing a team of
  design engineers a handful of tools, with the challenge that the jet aircraft
  they were designing must be repairable by an average mechanic in the field
  under combat conditions with only these tools.

> Hence, the "stupid" refers to the relationship between the way things break
  and the sophistication available to repair them.


* Is KISS rolling release or stable?
________________________________________________________________________________

Packages are updated as quickly as possible while at the same time tested to
ensure that no issues arise in the new version. A new version of a package will
be held back if it causes issues.

When a package update brings in a bug during the build process or at runtime,
it will be patched in KISS until it is fixed upstream. This will typically
happen hours after the version is available and doesn't cause a delay.

Nothing prevents you as a user from choosing the update schedule you would
prefer. Total control is in your hands. KISS merely provides you with an always
up-to-date repository pool.


* Something something BUS factor of ONE.
________________________________________________________________________________

Every user of the distribution owns their system in its entirety. The
management of the distribution which extends to the management of updates to
the user's system is entirely optional.

All KISS systems contain the full sources for the distribution and each user
has the means of managing and maintaining their machine on their lonesome (or
by forming a collective and secondary "upstream").

This includes:

  * The repositories with full git history.

    The repository updates are simply a 'git pull' which results in each user
    having a full copy of the git repositories on their machine at
    /var/db/kiss/.

  * The package manager and the kiss-* scripts.

    As these are all simple shell scripts, the installed "binaries" _are_ the
    unchanged source code. All of these are self-contained and separate
    programs.

    The 'kiss-outdated' script allows one to check their system for outdated
    packages against the repology.org database independent of whether or not
    repology has support for KISS itself.

    The 'kiss-export' script allows one to convert an installed package back
    into a redistributable and installable binary tarball. Simply run
    'kiss-export pkg_name' and a tarball will be created in the current
    directory.

  * The distribution's documentation.

    As the website sources are merely plain .txt files, the docs are available
    in /usr/share/doc/kiss and are readable in less, vim or the program of your
    choosing.

  * The init scripts.

    In addition to the reasoning given for the package manager above, KISS has
    no lock-in regarding how the machine boots. Were the init scripts to
    disappear, there would be no real loss.

    To continue further, the init scripts need not change. There is no need to
    update them. Any extensions to them can be made via the /etc/rc.d directory
    or the /etc/rc.conf file.

What all of this means is that were the GitHub or website to go down, there
would be no loss in code, documentation or the distribution itself.

It also extends to each user having everything they will need to continue the
distribution for themselves or for other users. A change of git remote is all
that is needed in the latter case.

KISS was designed to be maintainable by a single person. The repositories are
kept small and focused. There is no requirement or _need_ for infrastructure of
any kind.

A user today could choose to go their own way with their system. Everything
they need is already in the existing system. The power is in your hands.
You are free.
